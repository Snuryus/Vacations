#!perl
=head1 NAME

  Vacations module

=cut


use strict;
use warnings FATAL => 'all';

use Vacations::db::Vacations;
use Abills::Base qw/_bp sendmail/;

our(
  %lang,
  $html,
  $admin,
  $user,
  $db,
  %conf,
  @MODULES,
);

my $Vacations = Vacations->new($db, $admin, \%conf);
my $User = Users->new($db, $admin, \%conf);
my @lastday = (31,28,31,30,31,30,31,31,30,31,30,31);
my @months = ("січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня");

my $base_dir = $conf{TPL_DIR} . '../../';

#**********************************************************
=head2 vacations_user_info($attr)

=cut
#**********************************************************
sub vacations_user_info {
  
  if ($FORM{first_login} && $FORM{passwd} && $FORM{user}) {
    $html->message('info', $lang{INFO}, "Ваш логин: $FORM{user}\nВаш пароль: $FORM{passwd}");
  }

  $Vacations->info($user->{UID});

  if($Vacations->{ROLE} < 1) {
    $html->message('warn', $lang{WARNING}, "Ваш доступ заблокирован. Обратитесь к администратору.");
    return 1;
  }

  if ($FORM{CHANGE_PASSWORD} || $FORM{newpassword}) {
    form_passwd();
  }

  if(!$Vacations->{START_DATE}) {
    $html->message('warn', $lang{WARNING}, "Ваш аккаунт не связян ни с одним сотрудником.");
    $Vacations->{CHANGE_PASSWORD} = $html->button($lang{CHANGE_PASSWORD}, "index=10&CHANGE_PASSWORD=1&sid=$sid", { class => 'btn btn-sm btn-primary' });
    $html->tpl_show(_include('vacations_user_info', 'Vacations'), $Vacations);
    return 1;
  }
  
  if ($FORM{VCT_END}) {
    $Vacations->{VCT_START} = $FORM{VCT_START};
    $Vacations->{VCT_END} = $FORM{VCT_END};
    $Vacations->{FIO} = "$Vacations->{SURNAME} $Vacations->{NAME} $Vacations->{MID_NAME}";
    
    $Vacations->{VCT_START_DAY} = _date_to_str($FORM{VCT_START});
    $Vacations->{DATE} = _date_to_str($DATE);
    
    $Vacations->{VCT_DAYS} = _period_days($FORM{VCT_START}, $FORM{VCT_END});
    
    my $holidays = $Vacations->holidays({ WORKDAY => '2', INTERVAL => "$FORM{VCT_START}/$FORM{VCT_END}" });
    $Vacations->{HOLYDAYS} = 0;
    $Vacations->{HOLYDAYS} = scalar @$holidays if (ref $holidays eq 'ARRAY');
    my $days_used = $Vacations->{VCT_DAYS} - $Vacations->{HOLYDAYS};
    $Vacations->{VCT_USE_DAYS} = $days_used;
    
    my $periods_list = vct_periods({ NO_PRINT => 1});
    my $periods_text = "";
    foreach (@$periods_list) {
      my $days_in_period = $_->{days_accrued} - $_->{days_used};
      next unless ($days_in_period);
      if ($days_in_period >= $days_used ) {
        $periods_text .= "$_->{start_period} - $_->{end_period} : $days_used";
        last;
      }
      else {
        $periods_text .= "$_->{start_period} - $_->{end_period} : $days_in_period,<br>";
        $days_used -= $days_in_period;
      }
    }
    $Vacations->{PERIODS} = $periods_text;
    
    
    
    $html->tpl_show(_include('vacations_print', 'Vacations'), $Vacations);
    return 1;
  }
  elsif ($FORM{VCT_START}) {
    $Vacations->{VCT_START} = $FORM{VCT_START};
    $Vacations->{DATEPICKER1} = "<div class='col-md-6' id='datepicker3'></div>";
    $Vacations->{DATEPICKER2} = "<div class='col-md-6' id='datepicker2'></div>";
    $Vacations->{BUTTON2} = "<input type=submit name='next' value='Дальше' class='btn btn-primary'>";
  
    my $not_av_dates = _not_available_dates($FORM{VCT_START});
    my $holidays = $Vacations->holidays({ WORKDAY => '2'});
    foreach (@$holidays) {
      $Vacations->{DISABLE_DATES} .= "'$_->{date}', ";
    }
    $Vacations->{DISABLE_DATES} .= $not_av_dates;
    $Vacations->{STARTD} = $FORM{VCT_START};
    $Vacations->{END} = _add_days($FORM{VCT_START}, $Vacations->{TOTAL_DAYS_LEFT} );
    $html->tpl_show(_include('vacations_date_select', 'Vacations'), $Vacations);
    return 1;
  }
  elsif ($FORM{VACATION_REQUEST}) {
    $Vacations->{DATEPICKER1} = "<div class='col-md-6' id='datepicker1'></div>";
    $Vacations->{BUTTON1} = "<input type=submit name='next' value='Дальше' class='btn btn-primary'>";
    my $holidays = $Vacations->holidays({ WORKDAY => '0'});
    $Vacations->{DISABLE_DATES} = '';
    $Vacations->{STARTD} = $DATE;
    $Vacations->{END} = _add_days($DATE, 30);
    foreach (@$holidays) {
      $Vacations->{DISABLE_DATES} .= "'$_->{date}', ";
    }
    $html->tpl_show(_include('vacations_date_select', 'Vacations'), $Vacations);
    return 1;
  }

  if($Vacations->{ROLE} < 1) {
    $html->message('warn', $lang{WARNING}, "Ваш доступ заблокирован. Обратитесь к администратору.");
    return 1;
  }
  my $av_days = _available_vacation_length();
  foreach (@$av_days) {
    $Vacations->{AVAIABLE_LENGTH} .= "$_, ";
    if ($_ > 31) {
      $Vacations->{AVAIABLE_LENGTH} .= " ... @$av_days[-1]";
      last;
    }
  }
  $Vacations->{AVAIABLE_LENGTH} =~ s/,\s$//;
  $Vacations->{CHANGE_PASSWORD} = $html->button($lang{CHANGE_PASSWORD}, "index=10&CHANGE_PASSWORD=1&sid=$sid", { class => 'btn btn-sm btn-primary' });
  $Vacations->{VACATION_REQUEST} = $html->button("Заявление о предоставлении отпуска", "index=10&VACATION_REQUEST=1&sid=$sid", { class => 'btn btn-block btn-success' });
  $html->tpl_show(_include('vacations_user_info', 'Vacations'), $Vacations);

  return 1;
}

#**********************************************************
=head2 vacations_registration($attr)

=cut
#**********************************************************
sub vacations_registration {
  
  if ( $FORM{reg} ) {
    if (!$FORM{EMAIL} || $FORM{EMAIL} !~ /^(([^<>()[\]\\.,;:\s\@\"]+(\.[^<>()[\]\\.,;:\s\@\"]+)*)|(\".+\"))\@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/) {
      $Vacations->{MESSAGE} = $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_EMAIL}");
    }
    elsif ($FORM{TID}) {
      my $main_info = $Vacations->main_info($FORM{TID});
      if ($Vacations->{TOTAL}) {
        $Vacations->{MESSAGE} = $html->message('warn', $lang{ERROR}, "Пользователь с табельным номером $FORM{TID} уже зарегистрирован.");
      }
      else {
        my $emp_info = $Vacations->emp_info($FORM{TID});
        if (!$Vacations->{TOTAL}) {
          $Vacations->{MESSAGE} = $html->message('warn', $lang{ERROR}, "Табельный номер $FORM{TID} не найден.");
        }
        else {
          if ( !$FORM{SURNAME} ) {
            $Vacations->{MESSAGE} = $html->message('warn', $lang{ERROR}, "Укажите вашу фамилию.");
          }
          elsif ($emp_info->[0]->{surname} ne $FORM{SURNAME}) {
            $Vacations->{MESSAGE} = $html->message('warn', $lang{ERROR}, "Фамилия и табельный номер не совпадают.");
          }
          else {
            my $password = mk_unique_value($conf{PASSWD_LENGTH} || 6, { EXTRA_RULES => '0:0' });
            $User->add({ LOGIN => $FORM{EMAIL}, PASSWORD => $password });
            _error_show($User);

            my $uid = $User->{INSERT_ID};
    
            if ( $User->{errno} ) {
              $html->message('err', "$lang{ERROR}", "Ошибка при создании пользователя $FORM{TID}");
              return 0;
            }

            $User->pi_add({ UID => $uid, EMAIL => $FORM{EMAIL} });
            _error_show($User);

            $Vacations->user_add({ TID => $FORM{TID}, UID => $uid });
            _error_show($Vacations);

            if ( $Vacations->{errno} ) {
              $html->message('err', "$lang{ERROR}", "Обратитесь к администратору.");
            }
            else {
              $html->message('info', "$lang{SUCCESS}", "Пользователь $FORM{TID} успешно зарегистрирован.");
              my $login_url = $SELF_URL;
              $login_url =~ s/registration/index/;
              print "Location: $login_url?user=$FORM{EMAIL}&passwd=$password&first_login=1\n\n";
              return 1;
            }
          }
        }

      }
    }
    else {
      $Vacations->{MESSAGE} = $html->message('warn', $lang{ERROR}, "Укажите табельный номер.");
    }
  }

  $html->tpl_show(_include('vacations_user_registration', 'Vacations'), { %{$Vacations}, %FORM }, { ID => 'VACATIONS_REGISTRATION' });
  

  return 1;
}


#**********************************************************
=head2 orders_import($attr)

=cut
#**********************************************************
sub orders_import {
  my $filename = "$base_dir/var/datain/vacation_orders.csv";
  my @ColumnNames = ('TID', 'ORDER_ID', 'ORDER_DATE', 'VCT_START', 'VCT_END', 'VCT_DAYS', 'USED');
  my $counter = 0;

  unless (-e $filename) {
    $html->message('warn', "$lang{WARNING}", "Файл vacation_orders.csv не найден.");
    return 0;
  };

  if (-z $filename) {
    $html->message('warn', "$lang{WARNING}", "Файл vacation_orders.csv нулевой длинны.");
    return 0;
  };

  cmd("iconv -f CP1251 -t UTF-8 -o $filename.utf $filename");
  cmd("rm $filename");
  # $Vacations->truncate_table('vacations_orders');

  open FILE, "< $filename.utf" or die  "Can't open $filename.utf : $!";

  my $columns = <FILE>;

  while (<FILE>) {
    chomp $_;
    my %hash;
    @hash{@ColumnNames} = split (';');
    $hash{ORDER_DATE} = _str_to_date($hash{ORDER_DATE});
    $hash{VCT_START} = _str_to_date($hash{VCT_START});
    $hash{VCT_END} = _str_to_date($hash{VCT_END});

    $Vacations->add('vacations_orders', \%hash);
    if ( _error_show($Vacations) ) {
      $html->message('warn', "$lang{WARNING}", "Ошибка при добавлении приказа $hash{ORDER_ID}");
    }
    else {
      $counter++;
    }
  }

  close FILE;
  cmd("rm $filename.utf");
  return $counter;
}

#**********************************************************
=head2 holidays_import($attr)

=cut
#**********************************************************
sub holidays_import {
  my $filename = "$base_dir/var/datain/Holidays.csv";
  my @ColumnNames = ('DATE', 'WORKDAY');
  my $counter = 0;

  unless (-e $filename) {
    $html->message('warn', "$lang{WARNING}", "Файл Holidays.csv не найден.");
    return 0;
  };

  cmd("iconv -f CP1251 -t UTF-8 -o $filename.utf $filename");
  cmd("rm $filename");
  # $Vacations->truncate_table('vacations_holidays');

  open FILE, "< $filename.utf" or die  "Can't open $filename.utf : $!";

  my $columns = <FILE>;

  while (<FILE>) {
    chomp $_;
    my %hash;
    @hash{@ColumnNames} = split (';');
    $hash{DATE} = _str_to_date($hash{DATE});

    $Vacations->add('vacations_holidays', \%hash);
    if ( _error_show($Vacations) ) {
      $html->message('warn', "$lang{WARNING}", "Ошибка при добавлении даты $hash{DATE}");
    }
    else {
      $counter++;
    }
  }

  close FILE;
  cmd("rm $filename.utf");
  return $counter;
}

#**********************************************************
=head2 accrued_import($attr)

=cut
#**********************************************************
sub accrued_import {
  my $filename = "$base_dir/var/datain/vacation_acrule_periods.csv";
  my @ColumnNames = ('TID', 'START_PERIOD', 'END_PERIOD', 'DAYS_ACCRUED', 'DAYS_USED');
  my $counter = 0;

  unless (-e $filename) {
    $html->message('warn', "$lang{WARNING}", "Файл vacation_acrule_periods.csv не найден.");
    return 0;
  };

  cmd("iconv -f CP1251 -t UTF-8 -o $filename.utf $filename");
  cmd("rm $filename");

  # $Vacations->truncate_table('vacations_accrued_periods');

  open FILE, "< $filename.utf" or die  "Can't open $filename.utf : $!";

  my $columns = <FILE>;

  while (<FILE>) {
    chomp $_;
    my %hash;
    @hash{@ColumnNames} = split (';');
    $hash{START_PERIOD} = _str_to_date($hash{START_PERIOD});
    $hash{END_PERIOD} = _str_to_date($hash{END_PERIOD});

    $Vacations->add('vacations_accrued_periods', \%hash);
    if ( _error_show($Vacations) ) {
      $html->message('warn', "$lang{WARNING}", "Ошибка при добавлении периода $hash{START_PERIOD} - $hash{END_PERIOD}");
    }
    else {
      $counter++;
    }
  }

  close FILE;
  cmd("rm $filename.utf");
  return $counter;
}

#**********************************************************
=head2 employees_import($attr)

=cut
#**********************************************************
sub employees_import {
  my $filename = "$base_dir/var/datain/employees.csv";
  my @ColumnNames = ('TID', 'SURNAME', 'NAME', 'MID_NAME', 'SURNAME_GENETIVE', 'START_DATE', 'POSITION', 'VCT_DAYS', 'COMPANY', 'VCT_LEFT');
  my $counter = 0;

  unless (-e $filename) {
    $html->message('warn', "$lang{WARNING}", "Файл employees.csv не найден.");
    return 0;
  };

  cmd("iconv -f CP1251 -t UTF-8 -o $filename.utf $filename");
  cmd("rm $filename");

  # $Vacations->truncate_table('vacations_employees');

  open FILE, "< $filename.utf" or die  "Can't open $filename.utf : $!";

  my $columns = <FILE>;

  while (<FILE>) {
    chomp $_;
    my %hash;
    @hash{@ColumnNames} = split (';');
    $hash{START_DATE} = _str_to_date($hash{START_DATE});

    $Vacations->add('vacations_employees', \%hash);
    if ( _error_show($Vacations) ) {
      $html->message('warn', "$lang{WARNING}", "Ошибка при добавлении пользователя $hash{TID}");
    }
    else {
      $counter++;
    }
  }

  close FILE;
  cmd("rm $filename.utf");
  return $counter;
}

#**********************************************************
=head2 _str_to_date($attr)

convert 01.02.17 to 2017-02-01

=cut
#**********************************************************
sub _str_to_date {
  my ($str) = @_;
  return "20" . join '-', reverse split '\.', $str;
}

#**********************************************************
=head2 _date_to_str($date)

convert 01.02.17 to 2017-02-01

=cut
#**********************************************************
sub _date_to_str {
  my ($date) = @_;
  
  my ($year, $month, $day) = split '-', $date;
  
  return "\«$day\» $months[$month-1] $yearр.";
}

#**********************************************************
=head2 _not_available_dates($start_date)

return array of dates not available for end vacation

=cut
#**********************************************************
sub _not_available_dates {
  my ($date) = @_;
  my $av_len = _available_vacation_length();
  
  my $lenght = 1;
  my $counter = 0;
  my $date_list = '';
  my $holidays = $Vacations->holidays({ WORKDAY => '2'});
  my %holyhash = ();
  foreach (@$holidays) {
    $holyhash{$_->{date}} = 1;
  }
  
  while ($lenght <= @$av_len[-1] ) {
    if (!$holyhash{$date}) {
      if ( $lenght == $av_len->[$counter]) {
        $counter++;
      }
      else {
        $date_list .= "'$date', ";
      }
      $lenght++;
    }
    $date = _add_days($date, 1);
  }
  return $date_list;
}

#**********************************************************
=head2 _available_vacation_length()

return array of avaiable vacations

=cut
#**********************************************************
sub _available_vacation_length {
  $Vacations->info($user->{UID});
  my $periods_list = vct_periods({ NO_PRINT => 1});

  my @periods = ();
  my @avaiable_length = ();

  foreach (@$periods_list) {
    push @periods, ($_->{days_accrued} - $_->{days_used});
  }

  if ( @periods < 1 ) {
    @avaiable_length = (1 .. 32);
    return \@avaiable_length;
  }

  while (@periods > 0 && $periods[0] == 0) {
    shift @periods;
  }

  if ( @periods < 1 ) {
    return [ ];
  }

  if ( @periods == 1) {
    my $start_period = $periods_list->[-1]->{start_period};
    my $days_used_in_current_period = $periods_list->[-1]->{days_used};
    my $main_vacation_used = 0;

    if ($days_used_in_current_period > 14) {
      my $orders_list = $Vacations->orders_list($Vacations->{TID});
      @$orders_list = reverse @$orders_list;
      foreach (@$orders_list) {
        last if ($days_used_in_current_period < 14);
        $main_vacation_used = 1 if ($_->{vct_days} >= 14);
        $days_used_in_current_period -= $_->{vct_days};
      }
    }
    
    if ($main_vacation_used == 1) {
      @avaiable_length = (1 .. $periods[0]); 
    }
    elsif ( $periods[0] < (18 - $periods_list->[-1]->{days_used}) ) {
      @avaiable_length = (1 .. $periods[0]);
    }
    elsif ( $periods[0] < 14 ) {
      @avaiable_length = (1 .. (18 - $periods_list->[-1]->{days_used}) );
    }
    else {
      @avaiable_length = (1 .. (18 - $periods_list->[-1]->{days_used}), 14 .. $periods[0]);
    }

  }
  else {
    if ( $periods[0] < 14 ) {
      @avaiable_length = (1 .. $periods[0]);
    }
    else {
       @avaiable_length = (14 .. $periods[0]);
    }

    my $unused_days = 0;
    foreach (2 .. @periods)  {
      $unused_days += $periods[$_ - 1];
    }
    push  @avaiable_length, (($periods[0] + 1) .. ($periods[0] + $unused_days)); 
  }

  return \@avaiable_length;
}



#**********************************************************
=head2 vct_history($attr)

=cut
#**********************************************************
sub vct_history {
  
  $Vacations->info($user->{UID});
  if($Vacations->{ROLE} < 1) {
    $html->message('warn', $lang{WARNING}, "Ваш доступ заблокирован. Обратитесь к администратору.");
    return 1;
  }

  my $vct_list = $Vacations->orders_list($Vacations->{TID});

  my $table = $html->table({
    width         => '100%',
    caption       => "История отпусков",
    border        => 1,
    title_plain   => [ "Приказ №", "Дата приказа", "Начало отпуска", "Конец отпуска", "Длительность отпуска" ],
    ID            => 'orders',
  });
  
  my $total_days = 0;

  foreach my $vct_line ( @$vct_list ) {
    $table->addrow($vct_line->{order_id}, $vct_line->{order_date}, $vct_line->{vct_start}, $vct_line->{vct_end}, $vct_line->{vct_days});
    $total_days += $vct_line->{vct_days};
  }
  
  $table->addrow("Всего:", '', '', '', $total_days );

  print $table->show();

  return 1;
}

#**********************************************************
=head2 vct_periods($attr)

=cut
#**********************************************************
sub vct_periods {
  my ($attr) = @_;

  $Vacations->info($user->{UID});
  if($Vacations->{ROLE} < 1) {
    $html->message('warn', $lang{WARNING}, "Ваш доступ заблокирован. Обратитесь к администратору.");
    return 1;
  }

  if(!$Vacations->{START_DATE}) {
    $html->message('warn', $lang{WARNING}, "Ваш аккаунт не связян ни с одним сотрудником.");
    return 1;
  }

  # my $periods_list = $Vacations->periods_list($Vacations->{TID});

  my $table = $html->table({
    width         => '100%',
    caption       => "Начисление отпусков",
    border        => 1,
    title_plain   => [ "Начало периода", "Конец периода", "Начислено отпускных дней", "Использовано отпускных дней" ],
    ID            => 'periods',
  });
  
  my $total_days_accrued = 0;

  # foreach my $period_line ( @$periods_list ) {
  #   $table->addrow($period_line->{start_period}, $period_line->{end_period}, $period_line->{days_accrued}, $period_line->{days_used});
  #   $total_days_used += $period_line->{days_used};
  #   $total_days_accrued += $period_line->{days_accrued};
  # }

  my $date = $Vacations->{START_DATE};
  my $periods_list = ();
  while (_add_years($date, 1) lt "2017-12-31") {
    push (@$periods_list, { start_period => $date, end_period => _add_days(_add_years($date, 1), -1), days_accrued => 32 });
    $date = _add_years($date, 1);

    $total_days_accrued += 32;
  }
  
  # my $days_in_last_period = int (_period_days($date, $DATE) * 32 / 365);
  # push (@$periods_list, { start_period => $date, end_period => $DATE, , days_accrued => $days_in_last_period });
  my $days_in_last_period = int (_period_days($date, "2017-12-31") * 32 / 30.348 /12) + 1;
  push (@$periods_list, { start_period => $date, end_period => "2017-12-31", , days_accrued => $days_in_last_period });
  $total_days_accrued += $days_in_last_period;
  
  my $total_days_used = $total_days_accrued - $Vacations->{TOTAL_DAYS_LEFT};
  my $days_used = 0;

  foreach my $period_line ( @$periods_list ) {
    $period_line->{days_used} = ($period_line->{days_accrued} > $total_days_used ) ? $total_days_used : $period_line->{days_accrued};
    $total_days_used -=  $period_line->{days_used};
    $table->addrow($period_line->{start_period}, $period_line->{end_period}, $period_line->{days_accrued}, $period_line->{days_used});
  }
  
  if ($attr->{NO_PRINT}) {
    return $periods_list;
  }


  $table->addrow("Всего:", '', $total_days_accrued, $total_days_accrued - $Vacations->{TOTAL_DAYS_LEFT} );

  print $table->show();
  
  return 1;
}

#**********************************************************
=head2 user_role($uid)

=cut
#**********************************************************
sub user_role {
  my ($uid) = @_;

  $Vacations->info($uid);

  return $Vacations->{ROLE} || -1;
}

#**********************************************************
=head2 vacation_log_add($uid)

=cut
#**********************************************************
sub vacation_log_add {
  my $self = shift;
  my ($attr) = @_;

  return  $Vacations->log_add($attr) || 0;
}

#**********************************************************
=head2 vacations_users_list()

=cut
#**********************************************************
sub vacations_users_list {

  my $u_role = user_role($user->{UID});
  
  if($FORM{DELETE} && $u_role == 3 ) {
    $Vacations->user_del($FORM{DELETE}, 'users_pi');
    $Vacations->user_del($FORM{DELETE}, 'vacations_main');
    $Vacations->user_del($FORM{DELETE}, 'users');
  }
  elsif($FORM{ROLE_2}) {
    $Vacations->user_change($FORM{ROLE_2}, '2');
  }
  elsif($FORM{ROLE_1}) {
    $Vacations->user_change($FORM{ROLE_1}, '1');
  }
  elsif($FORM{ENABLE}) {
    $Vacations->user_change($FORM{ENABLE}, '1');
  }
  elsif($FORM{DISABLE}) {
    $Vacations->user_change($FORM{DISABLE}, '0');
  }
  elsif($FORM{NEW_EMAIL}) {
    $User->pi_change({ UID => $FORM{CHG_EMAIL}, EMAIL => $FORM{NEW_EMAIL} });
    _error_show($User);
  }
  elsif($FORM{CHG_EMAIL}) {
    $Vacations->info($FORM{CHG_EMAIL});
    $html->tpl_show(_include('vacations_change_email', 'Vacations'), { %$Vacations, %FORM });
  }
  elsif($FORM{NEW_PSWD}) {
    $User->change($FORM{CHG_PSWD}, { UID => $FORM{CHG_PSWD}, PASSWORD => $FORM{NEW_PSWD} });
    if ($FORM{SEND_EMAIL}) {
      $Vacations->info($FORM{CHG_PSWD});
      my $message = "LOGIN: $Vacations->{TID}\nPASSWORD: $FORM{NEW_PSWD}";
      print $html->header();
      sendmail("$conf{ADMIN_MAIL}", "$Vacations->{EMAIL}", "Password Recovery", "$message", "$conf{MAIL_CHARSET}", "", );
    }
  }
  elsif($FORM{CHG_PSWD}) {
    $Vacations->info($FORM{CHG_PSWD});
    $html->tpl_show(_include('vacations_change_pswd', 'Vacations'), { %$Vacations, %FORM });
  }

  my $user_list = $Vacations->users_list();
  
  my $table = $html->table({
    width         => '100%',
    caption       => "Список пользователей",
    border        => 1,
    title_plain   => [ "Табельный номер", "ФИО", "E-mail", "Права доступа", "", "" ],
    ID            => 'users',
  });

  foreach my $user_line ( @$user_list ) {
    my $delete_button = $html->button("Удалить", "index=$index&DELETE=$user_line->{uid}&sid=$sid", { class => 'del' }) if ($u_role == 3);
    
    if (!$user_line->{tid} || !$user_line->{surname}) {
      $table->addrow("Не найдено соответствующего сотрудника", '', $user_line->{login}, '', '', '', $delete_button);
    }
    else {
      my $block_button = $html->button("заблокировать", "index=$index&DISABLE=$user_line->{uid}&sid=$sid", { class => '_on' });
      my $fio = "$user_line->{surname} $user_line->{name} $user_line->{mid_name}";
      my $chg_pswd_button = $html->button("изменить пароль", "index=$index&CHG_PSWD=$user_line->{uid}&sid=$sid", { class => 'password' });
      my $chg_email_button = $html->button($user_line->{email} || "Не указано", "index=$index&CHG_EMAIL=$user_line->{uid}&sid=$sid");
      my @roles = ("Заблокирован", 
        $html->button("Сотрудник", "index=$index&ROLE_2=$user_line->{uid}&sid=$sid"),
        $html->button("Администратор", "index=$index&ROLE_1=$user_line->{uid}&sid=$sid"),
        "Системный администратор"
      );
      my $chg_role_button = $roles[$user_line->{role}];
      if ($user_line->{role} == 0) {
        $block_button = $html->button("разблокировать", "index=$index&ENABLE=$user_line->{uid}&sid=$sid",  { class => 'off' });  
      }
      $table->addrow($user_line->{tid}, $fio, $chg_email_button, $chg_role_button, $chg_pswd_button, $block_button,  $delete_button);
    }
  }

  print $table->show();

  return 1;
}

#**********************************************************
=head2 vacations_emp_list()

=cut
#**********************************************************
sub vacations_emp_list {

  if ($FORM{EMAIL} && $FORM{TID}) {
    my $password = mk_unique_value($conf{PASSWD_LENGTH} || 6, { EXTRA_RULES => '0:0' });
    $User->add({ LOGIN => $FORM{EMAIL}, PASSWORD => $password });
    _error_show($User);

    my $uid = $User->{INSERT_ID};
    
    if ( $User->{errno} ) {
      $html->message('err', "$lang{ERROR}", "Ошибка при создании пользователя $FORM{EMAIL}");
      return 0;
    }

    $User->pi_add({ UID => $uid, EMAIL => $FORM{EMAIL} });
    _error_show($User);

    $Vacations->user_add({ TID => $FORM{TID}, UID => $uid, ROLE => 1 });
    _error_show($Vacations);

    if ($FORM{SEND_EMAIL}) {
      my $message = "LOGIN: $FORM{EMAIL}\nPASSWORD: $password";
      print $html->header();
      sendmail("$conf{ADMIN_MAIL}", "$FORM{EMAIL}", "Password Recovery", "$message", "$conf{MAIL_CHARSET}", "", );
    }
  }
  elsif ($FORM{USER_ADD}) {
    $html->tpl_show(_include('vacations_user_reg', 'Vacations'), { TID => $FORM{USER_ADD}, %FORM });
  }


  my $emp_list = $Vacations->emp_list();
  my @roles = ("Заблокирован", "Сотрудник", "Администратор", "Системный администратор");
  
  my $table = $html->table({
    width         => '100%',
    caption       => "Список сотрудников",
    border        => 1,
    title_plain   => [ "ФИО", "Табельный номер", "Пользователь"],
    ID            => 'employees',
  });

  foreach my $emp_line ( @$emp_list ) {
    my $fio = "$emp_line->{surname} $emp_line->{name} $emp_line->{mid_name}";
    if ($emp_line->{uid}) {
      $table->addrow($fio, $emp_line->{tid}, $roles[$emp_line->{role}]);
    }
    else {
      my $user_add_button = $html->button("Создать аккаунт", "index=$index&USER_ADD=$emp_line->{tid}&SURNAME=$emp_line->{surname}&sid=$sid", { class => 'btn btn-xs btn-success' });
      $table->addrow($fio, $emp_line->{tid}, $user_add_button);
    }
  }

  print $table->show();

  return 1;
}

#**********************************************************
=head2 _add_years($date, $years)

=cut
#**********************************************************
sub _add_years {
  my ($date, $d_year) = @_;
  my ($year, $month, $day) = split '-', $date;

  $year += $d_year;

  $day = 28 if ($month == 2 && $day == 29 && ($year % 4));

  return sprintf('%04d-%02d-%02d', $year, $month, $day);
}

#**********************************************************
=head2 _add_days($date, $days)

=cut
#**********************************************************
sub _add_days {
  my ($date, $d_days) = @_;
  my ($year, $month, $day) = split '-', $date;
  
  $lastday[1] = ($year % 4) ? 28 : 29;
  $day += $d_days;

  while ($day > $lastday[$month-1]) {
    $day -= $lastday[$month-1];
    $month++;
    if ($month > 12) {
      $year++;
      $month = 1;
      $lastday[1] = ($year % 4) ? 28 : 29;
    }
  }

  while ($day < 1) {
    $month--;
    if ($month == 0) {
      $year--;
      $month = 12;
      $lastday[1] = ($year % 4) ? 28 : 29;
    }
    $day += $lastday[$month-1];
  }


  return sprintf('%04d-%02d-%02d', $year, $month, $day);
}

#**********************************************************
=head2 _period_days($date_start, $date_end)

=cut
#**********************************************************
sub _period_days {
  my ($s_date, $e_date) = @_;
  my ($s_year, $s_month, $s_day) = split '-', $s_date;
  my ($e_year, $e_month, $e_day) = split '-', $e_date;
  
  $lastday[1] = ($e_year % 4) ? 28 : 29;
  
  while ($e_year > $s_year || $e_month > $s_month ) {
    $e_month--;
    if ($e_month == 0) {
      $e_year--;
      $e_month = 12;
      $lastday[1] = ($e_year % 4) ? 28 : 29;
    }
    $e_day += $lastday[$e_month-1]
  }

  return $e_day - $s_day + 1;
}

#**********************************************************
=head2 import_menu($date_start, $date_end)

=cut
#**********************************************************
sub import_menu {

  my $file_dir = "$base_dir/var/datain";

  if ($FORM{FILE_UPLOAD}) {
    upload_file($FORM{FILE_UPLOAD}, { PREFIX => '../../var/datain'});
    $admin->system_action_add("$lang{ADDED} $lang{FILE} - $FORM{FILE_UPLOAD}{filename}", {TYPE => 62});
  }

  if ($FORM{file_del} && $FORM{COMMENTS}) {
    $FORM{file_del} =~ s/ |\///g;
    if (unlink("$file_dir/$FORM{file_del}") == 1) {
      $html->message('info', $lang{DELETED}, "$lang{DELETED}: '$FORM{file_del}'");
      $admin->system_action_add("$lang{DELETED} - $FORM{file_del} - $FORM{COMMENTS}", {TYPE => 63});
    }
    else {
      $html->message('err', $lang{DELETED}, "$lang{ERROR}");
    }
  }


  if ($FORM{COMMENTS} && $FORM{TRUN} && $FORM{TRUN} == 1) {
    $Vacations->truncate_table('vacations_employees');
    $html->message('warn', "$lang{WARNING}", "Удалены все записи из таблицы 'Сотрудники'");
  }
  if ($FORM{COMMENTS} && $FORM{TRUN} && $FORM{TRUN} == 2) {
    $Vacations->truncate_table('vacations_orders');
    $html->message('warn', "$lang{WARNING}", "Удалены все записи из таблицы 'Приказы'");
  }
  if ($FORM{COMMENTS} && $FORM{TRUN} && $FORM{TRUN} == 3) {
    $Vacations->truncate_table('vacations_holidays');
    $html->message('warn', "$lang{WARNING}", "Удалены все записи из таблицы 'Праздники'");
  }

  if ($FORM{IMPORT} && $FORM{IMPORT} == 1) {
    my $count = employees_import();
    $html->message('info', "$lang{SUCCESS}", "Импортировано $count записей") if ($count);
  }
  if ($FORM{IMPORT} && $FORM{IMPORT} == 2) {
    my $count = orders_import();
    $html->message('info', "$lang{SUCCESS}", "Импортировано $count записей") if ($count);
  }
  if ($FORM{IMPORT} && $FORM{IMPORT} == 3) {
    my $count = holidays_import();
    $html->message('info', "$lang{SUCCESS}", "Импортировано $count записей") if ($count);
  }

  my $table = $html->table({
    width         => '100%',
    caption       => "Импорт данных",
    border        => 1,
    ID            => 'import',
  });

  $table->addrow(
      "Сотрудники",
      $html->button("Импортировать", "index=$index&IMPORT=1&sid=$sid", { class => 'btn btn-xs btn-success' }),
      $html->button("Очистить таблицу", "index=$index&TRUN=1&sid=$sid", { MESSAGE => "Подтвердите удаление данных", class => 'btn btn-xs btn-danger' }),
  );
  $table->addrow(
      "Приказы",
      $html->button("Импортировать", "index=$index&IMPORT=2&sid=$sid", { class => 'btn btn-xs btn-success' }),
      $html->button("Очистить таблицу", "index=$index&TRUN=2&sid=$sid", { MESSAGE => "Подтвердите удаление данных", class => 'btn btn-xs btn-danger' }),
  );
  $table->addrow(
      "Праздники",
      $html->button("Импортировать", "index=$index&IMPORT=3&sid=$sid", { class => 'btn btn-xs btn-success' }),
      $html->button("Очистить таблицу", "index=$index&TRUN=3&sid=$sid", { MESSAGE => "Подтвердите удаление данных", class => 'btn btn-xs btn-danger' }),
  );

  print $table->show();

  $table = $html->table(
    {
      width       => '600',
      caption     => $lang{OTHER},
      title_plain => [ "FILE", "$lang{SIZE} (Byte)", "$lang{DATE}", "-" ],
      cols_align  => [ 'left', 'right', 'right', 'left', 'center' ]
    }
  );

  if (-d "$file_dir") {
    opendir my $fh, "$file_dir" or die "Can't open dir '$conf{TPL_DIR}' $!\n";
      my @contents = grep !/^\.\.?$/ && !/\.tpl$/, readdir $fh;
    closedir $fh;

    $table->{rowcolor} = undef;
    $table->{extra}    = undef;
    
    foreach my $file (sort @contents) {
      next if (-d "$file_dir/" . $file);

      my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks);

      ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat("$file_dir/$file");
      $mtime = POSIX::strftime("%Y-%m-%d", localtime($mtime));

      $table->addrow("$file", $size, $mtime, $html->button($lang{DEL}, "index=$index&file_del=$file", { MESSAGE => "$lang{DEL} '$file'", class => 'del' }));
    }

  }
  print $table->show();

  $html->tpl_show(_include('vacations_fileadd', 'Vacations'), $Vacations);
}

#**********************************************************
=head2 vacation_log($uid)

=cut
#**********************************************************
sub vacation_log {
  my ($attr) = @_;

  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
    
  $FORM{FROM_DATE} //= sprintf("%04d-%02d-%02d", 1900+$year, $mon+1, 1);
  $FORM{TO_DATE} //= sprintf("%04d-%02d-%02d", 1900+$year, $mon+1, $mday);

  $html->tpl_show(_include('vacations_log', 'Vacations'), {%FORM, %$Vacations});


  my $log_list = $Vacations->log_list({
    INTERVAL  => "$FORM{FROM_DATE}/$FORM{TO_DATE}",
    EMAIL     => '_SHOW',
    IP        => '_SHOW',
    COMMENTS  => '_SHOW',

    COLS_NAME => 1,
  });

  my $table = $html->table({
    width         => '100%',
    caption       => "Лог подключений",
    border        => 1,
    title_plain   => [ "Дата", "Логин", "IP", "Комментарий"],
    ID            => 'log',
  });

  foreach (@$log_list) {
    $table->addrow($_->{date}, $_->{email}, $_->{ip}, $_->{comments});
  }

  print $table->show();

  return  1;
}

1